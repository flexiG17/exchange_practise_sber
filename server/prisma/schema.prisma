generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model enterprise {
  id          String    @id @default(uuid())
  name        String    @db.Text
  description String    @db.Text
  location    String    @db.Text
  created_at  DateTime  @default(now()) @db.DateTime(6)
  updated_at  DateTime  @updatedAt @db.DateTime(6)
  request     request[]
  user        user[]
}

model program {
  id           String         @id @default(uuid())
  code         String         @db.Text
  name         String         @db.Text
  program_tags program_tags[]
  student      student[]
}

model program_tags {
  id         String  @id @default(uuid())
  program_id String  @db.VarChar(36)
  tag_id     String  @db.VarChar(36)
  program    program @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_PROGRAM")
  tag        tag     @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_TAG")

  @@index([program_id], map: "FK_PROGRAM")
  @@index([tag_id], map: "FK_TAG")
}

model request {
  id               String             @id @default(uuid())
  name             String             @db.Text
  type             request_type
  university_id    String?            @db.VarChar(36)
  enterprise_id    String?
  status           request_status     @default(open)
  students_limit   Int
  description      String             @db.Text
  created_at       DateTime           @default(now()) @db.DateTime(6)
  updated_at       DateTime           @updatedAt @db.DateTime(6)
  enterprise       enterprise?        @relation(fields: [enterprise_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_ENTERPRISE_TASK")
  university       university?        @relation(fields: [university_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_UNIVERSITY_TASK")
  request_programs request_programs[]
  request_students request_students[]

  @@index([enterprise_id], map: "FK_ENTERPRISE_TASK")
  @@index([university_id], map: "FK_UNIVERSITY_AUTHOR")
}

model request_programs {
  id         String  @id @default(uuid())
  request_id String
  program_id String
  request    request @relation(fields: [request_id], references: [id], onUpdate: Restrict, map: "FK_REQUEST_ID_FOR_PROGRAM")

  @@index([request_id], map: "FK_REQUEST_PROGRAM_ID")
}

model request_students {
  id         String  @id @default(uuid())
  request_id String
  student_id String
  request    request @relation(fields: [request_id], references: [id], onUpdate: Restrict, map: "FK_REQUEST_ID")
  user       user    @relation(fields: [student_id], references: [id], onUpdate: Restrict, map: "FK_REQUEST_USER")

  @@index([request_id], map: "FK_REQUEST_ID")
  @@index([student_id], map: "FK_REQUEST_USER")
}

model student {
  id                    String         @id @default(uuid())
  description           String         @db.Text
  university_id         String         @db.VarChar(36)
  program_id            String         @db.VarChar(36)
  enterprise_request_id String?        @db.VarChar(36)
  course                student_course
  academic_group        String         @db.Text
  program               program        @relation(fields: [program_id], references: [id], onUpdate: Restrict, map: "FK_STUDENT_PROGRAM")
  university            university     @relation(fields: [university_id], references: [id], onUpdate: Restrict, map: "FK_STUDENT_UNIVERSITY")
  user                  user[]

  @@index([enterprise_request_id], map: "FK_STUDENT_ENTERPRISE_REQUEST")
  @@index([program_id], map: "FK_STUDENT_PROGRAM")
  @@index([university_id], map: "FK_STUDENT_UNIVERSITY")
}

model tag {
  id           String         @id @default(uuid())
  name         String         @db.Text
  program_tags program_tags[]
}

model university {
  id          String    @id @default(uuid())
  name        String    @db.Text
  description String    @db.Text
  location    String    @db.Text
  created_at  DateTime  @default(now()) @db.DateTime(6)
  updated_at  DateTime  @updatedAt @db.DateTime(6)
  request     request[]
  student     student[]
  user        user[]
}

model user {
  id               String             @id @default(uuid())
  name             String             @db.Text
  email            String             @db.Text
  phone_number     String             @db.Text
  gender           user_gender
  password         String             @db.Text
  role             user_role
  student_id       String?            @db.VarChar(36)
  university_id    String?            @db.VarChar(36)
  enterprise_id    String?            @db.VarChar(36)
  created_at       DateTime           @default(now()) @db.DateTime(6)
  updated_at       DateTime           @updatedAt @db.DateTime(6)
  request_students request_students[]
  enterprise       enterprise?        @relation(fields: [enterprise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USER_FROM_ENTERPRISE")
  university       university?        @relation(fields: [university_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USER_FROM_UNIVERSITY")
  student          student?           @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USER_IS__STUDENT")

  @@index([enterprise_id], map: "FK_USER_FROM_ENTERPRISE")
  @@index([university_id], map: "FK_USER_FROM_UNIVERSITY")
  @@index([student_id], map: "FK_USER_IS__STUDENT")
}

enum request_type {
  university
  enterprise
}

enum user_gender {
  male
  female
}

enum request_status {
  open
  waiting
  in_progress
  review
  refuse
  approved
  archived
}

enum student_course {
  one
  two
  three
  four
  five
  six
}

enum user_role {
  student
  enterprise
  university
  admin
}
